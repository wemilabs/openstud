generator client {
  provider = "prisma-client"
  output = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL") // points to the connection pool for queries
  directUrl = env("DIRECT_URL")   // points to the database for migrations
}

enum UserRole {
  STUDENT
  PROFESSOR
  RESEARCHER
  SUPERVISOR
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  role          UserRole?
  onboardingCompleted Boolean @default(false)
  bio           String?
  school        String?
  academicId    String?
  email         String?   @unique
  emailVerified DateTime?
  schoolEmail   String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  workspaces    WorkspaceMember[]
  projects      Project[]
  tasks         Task[]
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  AIConversation AIConversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Course {
  id          String   @id @default(cuid())
  name        String
  code        String? @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]

  @@index([userId])
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String?  @db.Text
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model Workspace {
  id          String       @id @default(cuid())
  name        String
  members     WorkspaceMember[]
  projects    Project[]
  invitations WorkspaceInvitation[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  Task Task[]
}

model WorkspaceMember {
  id        String     @id @default(cuid())
  workspaceId    String
  userId    String
  role      WorkspaceRole   @default(MEMBER)
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([workspaceId, userId])
  @@index([userId])
}

model WorkspaceInvitation {
  id          String    @id @default(cuid())
  workspaceId      String
  workspace        Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        WorkspaceRole  @default(MEMBER)
  token       String    @unique
  expires     DateTime
  maxUses     Int?      @default(0)
  usedCount   Int       @default(0)
  createdBy   String    
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
  @@index([token])
}

enum Plan {
  FREE
  PRO
  ULTIMATE
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  workspaceId      String?
  workspace        Workspace?    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([workspaceId])
  @@index([userId])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  completionPercentage Int @default(0)
  dueDate     DateTime?
  priority    String?
  category    String?
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspaceId String?
  workspace   Workspace?  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdById String?
  createdBy   User?     @relation(fields: [createdById], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([projectId])
  @@index([createdById])
}

model AIConversation {
  id            String    @id @default(cuid())
  title         String?
  persona       String @default("tutor")
  createdById   String
  createdBy     User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id              String       @id @default(cuid())
  conversationId  String
  conversation    AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role            String
  persona         String @default("tutor")
  content         String       @db.Text
  createdAt       DateTime     @default(now())

  @@index([conversationId])
}